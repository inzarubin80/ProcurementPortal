// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc_repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserAuthProviders = `-- name: AddUserAuthProviders :one
INSERT INTO user_auth_providers (user_id, provider_uid, provider, name)
VALUES ($1, $2, $3, $4)
returning user_id, provider_uid, provider, name
`

type AddUserAuthProvidersParams struct {
	UserID      int64
	ProviderUid string
	Provider    string
	Name        *string
}

func (q *Queries) AddUserAuthProviders(ctx context.Context, arg *AddUserAuthProvidersParams) (*UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, addUserAuthProviders,
		arg.UserID,
		arg.ProviderUid,
		arg.Provider,
		arg.Name,
	)
	var i UserAuthProvider
	err := row.Scan(
		&i.UserID,
		&i.ProviderUid,
		&i.Provider,
		&i.Name,
	)
	return &i, err
}

const countCategories = `-- name: CountCategories :one
SELECT COUNT(*) FROM categories WHERE user_id = $1 AND is_active = TRUE
`

func (q *Queries) CountCategories(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countCategoriesByLanguage = `-- name: CountCategoriesByLanguage :one
SELECT COUNT(*) FROM categories WHERE user_id = $1 AND programming_language = $2 AND is_active = TRUE
`

type CountCategoriesByLanguageParams struct {
	UserID              int64
	ProgrammingLanguage string
}

func (q *Queries) CountCategoriesByLanguage(ctx context.Context, arg *CountCategoriesByLanguageParams) (int64, error) {
	row := q.db.QueryRow(ctx, countCategoriesByLanguage, arg.UserID, arg.ProgrammingLanguage)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countExercises = `-- name: CountExercises :one
SELECT COUNT(*) FROM exercises WHERE user_id = $1 AND is_active = TRUE
`

func (q *Queries) CountExercises(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countExercises, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countExercisesByCategory = `-- name: CountExercisesByCategory :one
SELECT COUNT(*) FROM exercises WHERE category_id = $1 AND is_active = TRUE
`

func (q *Queries) CountExercisesByCategory(ctx context.Context, categoryID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExercisesByCategory, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countExercisesFiltered = `-- name: CountExercisesFiltered :one
SELECT COUNT(*) FROM exercises e
WHERE e.user_id = $1
  AND e.is_active = TRUE
  AND ($2::varchar IS NULL OR e.programming_language = $2)
  AND ($3::uuid IS NULL OR e.category_id = $3)
  AND ($4::varchar IS NULL OR e.difficulty = $4)
`

type CountExercisesFilteredParams struct {
	UserID  int64
	Column2 string
	Column3 pgtype.UUID
	Column4 string
}

func (q *Queries) CountExercisesFiltered(ctx context.Context, arg *CountExercisesFilteredParams) (int64, error) {
	row := q.db.QueryRow(ctx, countExercisesFiltered,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    user_id, name, description, programming_language, color, icon, status, created_at, updated_at, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, NOW(), NOW(), TRUE
) RETURNING id, user_id, name, description, programming_language, color, icon, status, created_at, updated_at, is_active
`

type CreateCategoryParams struct {
	UserID              int64
	Name                string
	Description         *string
	ProgrammingLanguage string
	Color               *string
	Icon                *string
	Status              *string
}

func (q *Queries) CreateCategory(ctx context.Context, arg *CreateCategoryParams) (*Category, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.ProgrammingLanguage,
		arg.Color,
		arg.Icon,
		arg.Status,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ProgrammingLanguage,
		&i.Color,
		&i.Icon,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return &i, err
}

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (
    user_id, title, description, category_id, difficulty, programming_language, code_to_remember, created_at, updated_at, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, NOW(), NOW(), TRUE
) RETURNING id, user_id, title, description, category_id, difficulty, programming_language, code_to_remember, created_at, updated_at, is_active
`

type CreateExerciseParams struct {
	UserID              int64
	Title               string
	Description         *string
	CategoryID          pgtype.UUID
	Difficulty          string
	ProgrammingLanguage string
	CodeToRemember      string
}

func (q *Queries) CreateExercise(ctx context.Context, arg *CreateExerciseParams) (*Exercise, error) {
	row := q.db.QueryRow(ctx, createExercise,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.Difficulty,
		arg.ProgrammingLanguage,
		arg.CodeToRemember,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CategoryID,
		&i.Difficulty,
		&i.ProgrammingLanguage,
		&i.CodeToRemember,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return &i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name)
VALUES ($1)
returning user_id
`

func (q *Queries) CreateUser(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, name)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const deleteCategory = `-- name: DeleteCategory :exec
UPDATE categories SET is_active = FALSE WHERE id = $1 AND user_id = $2
`

type DeleteCategoryParams struct {
	ID     pgtype.UUID
	UserID int64
}

func (q *Queries) DeleteCategory(ctx context.Context, arg *DeleteCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteCategory, arg.ID, arg.UserID)
	return err
}

const deleteExercise = `-- name: DeleteExercise :exec
UPDATE exercises SET is_active = FALSE WHERE id = $1 AND user_id = $2
`

type DeleteExerciseParams struct {
	ID     pgtype.UUID
	UserID int64
}

func (q *Queries) DeleteExercise(ctx context.Context, arg *DeleteExerciseParams) error {
	_, err := q.db.Exec(ctx, deleteExercise, arg.ID, arg.UserID)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT id, user_id, name, description, programming_language, color, icon, status, created_at, updated_at, is_active FROM categories
WHERE user_id = $1 AND is_active = TRUE
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCategoriesParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetCategories(ctx context.Context, arg *GetCategoriesParams) ([]*Category, error) {
	rows, err := q.db.Query(ctx, getCategories, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ProgrammingLanguage,
			&i.Color,
			&i.Icon,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByLanguage = `-- name: GetCategoriesByLanguage :many
SELECT id, user_id, name, description, programming_language, color, icon, status, created_at, updated_at, is_active FROM categories
WHERE user_id = $1 AND programming_language = $2 AND is_active = TRUE
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type GetCategoriesByLanguageParams struct {
	UserID              int64
	ProgrammingLanguage string
	Limit               int32
	Offset              int32
}

func (q *Queries) GetCategoriesByLanguage(ctx context.Context, arg *GetCategoriesByLanguageParams) ([]*Category, error) {
	rows, err := q.db.Query(ctx, getCategoriesByLanguage,
		arg.UserID,
		arg.ProgrammingLanguage,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.ProgrammingLanguage,
			&i.Color,
			&i.Icon,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, user_id, name, description, programming_language, color, icon, status, created_at, updated_at, is_active FROM categories WHERE id = $1 AND user_id = $2 AND is_active = TRUE
`

type GetCategoryParams struct {
	ID     pgtype.UUID
	UserID int64
}

func (q *Queries) GetCategory(ctx context.Context, arg *GetCategoryParams) (*Category, error) {
	row := q.db.QueryRow(ctx, getCategory, arg.ID, arg.UserID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ProgrammingLanguage,
		&i.Color,
		&i.Icon,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return &i, err
}

const getExercise = `-- name: GetExercise :one
SELECT id, user_id, title, description, category_id, difficulty, programming_language, code_to_remember, created_at, updated_at, is_active FROM exercises WHERE id = $1 AND user_id = $2 AND is_active = TRUE
`

type GetExerciseParams struct {
	ID     pgtype.UUID
	UserID int64
}

func (q *Queries) GetExercise(ctx context.Context, arg *GetExerciseParams) (*Exercise, error) {
	row := q.db.QueryRow(ctx, getExercise, arg.ID, arg.UserID)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CategoryID,
		&i.Difficulty,
		&i.ProgrammingLanguage,
		&i.CodeToRemember,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return &i, err
}

const getExerciseStat = `-- name: GetExerciseStat :one
SELECT id, user_id, exercise_id, total_attempts, successful_attempts, total_typing_time, total_typed_chars, created_at, updated_at FROM exercise_stats WHERE user_id = $1 AND exercise_id = $2
`

type GetExerciseStatParams struct {
	UserID     int64
	ExerciseID pgtype.UUID
}

func (q *Queries) GetExerciseStat(ctx context.Context, arg *GetExerciseStatParams) (*ExerciseStat, error) {
	row := q.db.QueryRow(ctx, getExerciseStat, arg.UserID, arg.ExerciseID)
	var i ExerciseStat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExerciseID,
		&i.TotalAttempts,
		&i.SuccessfulAttempts,
		&i.TotalTypingTime,
		&i.TotalTypedChars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getExercises = `-- name: GetExercises :many
SELECT e.id, e.user_id, e.title, e.description, e.category_id, e.difficulty, e.programming_language, e.code_to_remember, e.created_at, e.updated_at, e.is_active, es.successful_attempts
FROM exercises e
LEFT JOIN exercise_stats es ON es.exercise_id = e.id AND es.user_id = $1
WHERE e.user_id = $1 AND e.is_active = TRUE
ORDER BY e.created_at DESC
LIMIT $2 OFFSET $3
`

type GetExercisesParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetExercisesRow struct {
	ID                  pgtype.UUID
	UserID              int64
	Title               string
	Description         *string
	CategoryID          pgtype.UUID
	Difficulty          string
	ProgrammingLanguage string
	CodeToRemember      string
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	IsActive            *bool
	SuccessfulAttempts  *int32
}

func (q *Queries) GetExercises(ctx context.Context, arg *GetExercisesParams) ([]*GetExercisesRow, error) {
	rows, err := q.db.Query(ctx, getExercises, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetExercisesRow
	for rows.Next() {
		var i GetExercisesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CategoryID,
			&i.Difficulty,
			&i.ProgrammingLanguage,
			&i.CodeToRemember,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
			&i.SuccessfulAttempts,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExercisesFiltered = `-- name: GetExercisesFiltered :many
SELECT e.id, e.user_id, e.title, e.description, e.category_id, e.difficulty, e.programming_language, e.code_to_remember, e.created_at, e.updated_at, e.is_active, es.successful_attempts
FROM exercises e
LEFT JOIN exercise_stats es ON es.exercise_id = e.id AND es.user_id = $1
WHERE e.user_id = $1
  AND e.is_active = TRUE
  AND ($2::varchar = '' OR e.programming_language = $2)
  AND ($3::uuid IS NULL OR e.category_id = $3)
  AND ($4::varchar = '' OR e.difficulty = $4)
ORDER BY e.created_at DESC
LIMIT $5 OFFSET $6
`

type GetExercisesFilteredParams struct {
	UserID  int64
	Column2 string
	Column3 pgtype.UUID
	Column4 string
	Limit   int32
	Offset  int32
}

type GetExercisesFilteredRow struct {
	ID                  pgtype.UUID
	UserID              int64
	Title               string
	Description         *string
	CategoryID          pgtype.UUID
	Difficulty          string
	ProgrammingLanguage string
	CodeToRemember      string
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	IsActive            *bool
	SuccessfulAttempts  *int32
}

func (q *Queries) GetExercisesFiltered(ctx context.Context, arg *GetExercisesFilteredParams) ([]*GetExercisesFilteredRow, error) {
	rows, err := q.db.Query(ctx, getExercisesFiltered,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetExercisesFilteredRow
	for rows.Next() {
		var i GetExercisesFilteredRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CategoryID,
			&i.Difficulty,
			&i.ProgrammingLanguage,
			&i.CodeToRemember,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
			&i.SuccessfulAttempts,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAuthProvidersByProviderUid = `-- name: GetUserAuthProvidersByProviderUid :one
SELECT user_id, provider_uid, provider, name FROM user_auth_providers
WHERE provider_uid = $1 AND provider = $2
`

type GetUserAuthProvidersByProviderUidParams struct {
	ProviderUid string
	Provider    string
}

func (q *Queries) GetUserAuthProvidersByProviderUid(ctx context.Context, arg *GetUserAuthProvidersByProviderUidParams) (*UserAuthProvider, error) {
	row := q.db.QueryRow(ctx, getUserAuthProvidersByProviderUid, arg.ProviderUid, arg.Provider)
	var i UserAuthProvider
	err := row.Scan(
		&i.UserID,
		&i.ProviderUid,
		&i.Provider,
		&i.Name,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, name, evaluation_strategy, maximum_score FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.EvaluationStrategy,
		&i.MaximumScore,
	)
	return &i, err
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT user_id, name, evaluation_strategy, maximum_score FROM users
WHERE user_id = ANY($1::bigint[])
`

func (q *Queries) GetUsersByIDs(ctx context.Context, dollar_1 []int64) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.EvaluationStrategy,
			&i.MaximumScore,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories SET
    name = $1,
    description = $2,
    programming_language = $3,
    color = $4,
    icon = $5,
    status = $6,
    updated_at = NOW()
WHERE id = $7 AND user_id = $8 AND is_active = TRUE
RETURNING id, user_id, name, description, programming_language, color, icon, status, created_at, updated_at, is_active
`

type UpdateCategoryParams struct {
	Name                string
	Description         *string
	ProgrammingLanguage string
	Color               *string
	Icon                *string
	Status              *string
	ID                  pgtype.UUID
	UserID              int64
}

func (q *Queries) UpdateCategory(ctx context.Context, arg *UpdateCategoryParams) (*Category, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.Name,
		arg.Description,
		arg.ProgrammingLanguage,
		arg.Color,
		arg.Icon,
		arg.Status,
		arg.ID,
		arg.UserID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.ProgrammingLanguage,
		&i.Color,
		&i.Icon,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return &i, err
}

const updateExercise = `-- name: UpdateExercise :one
UPDATE exercises SET
    title = $1,
    description = $2,
    category_id = $3,
    difficulty = $4,
    programming_language = $5,
    code_to_remember = $6,
    updated_at = NOW()
WHERE id = $7 AND user_id = $8 AND is_active = TRUE
RETURNING id, user_id, title, description, category_id, difficulty, programming_language, code_to_remember, created_at, updated_at, is_active
`

type UpdateExerciseParams struct {
	Title               string
	Description         *string
	CategoryID          pgtype.UUID
	Difficulty          string
	ProgrammingLanguage string
	CodeToRemember      string
	ID                  pgtype.UUID
	UserID              int64
}

func (q *Queries) UpdateExercise(ctx context.Context, arg *UpdateExerciseParams) (*Exercise, error) {
	row := q.db.QueryRow(ctx, updateExercise,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.Difficulty,
		arg.ProgrammingLanguage,
		arg.CodeToRemember,
		arg.ID,
		arg.UserID,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CategoryID,
		&i.Difficulty,
		&i.ProgrammingLanguage,
		&i.CodeToRemember,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return &i, err
}

const updateExerciseStat = `-- name: UpdateExerciseStat :one
UPDATE exercise_stats SET
    total_attempts = $3,
    successful_attempts = $4,
    total_typing_time = $5,
    total_typed_chars = $6,
    updated_at = NOW()
WHERE user_id = $1 AND exercise_id = $2
RETURNING id, user_id, exercise_id, total_attempts, successful_attempts, total_typing_time, total_typed_chars, created_at, updated_at
`

type UpdateExerciseStatParams struct {
	UserID             int64
	ExerciseID         pgtype.UUID
	TotalAttempts      int32
	SuccessfulAttempts int32
	TotalTypingTime    int64
	TotalTypedChars    int32
}

func (q *Queries) UpdateExerciseStat(ctx context.Context, arg *UpdateExerciseStatParams) (*ExerciseStat, error) {
	row := q.db.QueryRow(ctx, updateExerciseStat,
		arg.UserID,
		arg.ExerciseID,
		arg.TotalAttempts,
		arg.SuccessfulAttempts,
		arg.TotalTypingTime,
		arg.TotalTypedChars,
	)
	var i ExerciseStat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExerciseID,
		&i.TotalAttempts,
		&i.SuccessfulAttempts,
		&i.TotalTypingTime,
		&i.TotalTypedChars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET name = $1
WHERE user_id = $2
RETURNING user_id, name, evaluation_strategy, maximum_score
`

type UpdateUserNameParams struct {
	Name   string
	UserID int64
}

func (q *Queries) UpdateUserName(ctx context.Context, arg *UpdateUserNameParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUserName, arg.Name, arg.UserID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.EvaluationStrategy,
		&i.MaximumScore,
	)
	return &i, err
}

const upsertExerciseStat = `-- name: UpsertExerciseStat :one
INSERT INTO exercise_stats (user_id, exercise_id, total_attempts, successful_attempts, total_typing_time, total_typed_chars, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())
ON CONFLICT (user_id, exercise_id) DO UPDATE SET
    total_attempts = exercise_stats.total_attempts + EXCLUDED.total_attempts,
    successful_attempts = exercise_stats.successful_attempts + EXCLUDED.successful_attempts,
    total_typing_time = exercise_stats.total_typing_time + EXCLUDED.total_typing_time,
    total_typed_chars = exercise_stats.total_typed_chars + EXCLUDED.total_typed_chars,
    updated_at = NOW()
RETURNING id, user_id, exercise_id, total_attempts, successful_attempts, total_typing_time, total_typed_chars, created_at, updated_at
`

type UpsertExerciseStatParams struct {
	UserID             int64
	ExerciseID         pgtype.UUID
	TotalAttempts      int32
	SuccessfulAttempts int32
	TotalTypingTime    int64
	TotalTypedChars    int32
}

func (q *Queries) UpsertExerciseStat(ctx context.Context, arg *UpsertExerciseStatParams) (*ExerciseStat, error) {
	row := q.db.QueryRow(ctx, upsertExerciseStat,
		arg.UserID,
		arg.ExerciseID,
		arg.TotalAttempts,
		arg.SuccessfulAttempts,
		arg.TotalTypingTime,
		arg.TotalTypedChars,
	)
	var i ExerciseStat
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExerciseID,
		&i.TotalAttempts,
		&i.SuccessfulAttempts,
		&i.TotalTypingTime,
		&i.TotalTypedChars,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
