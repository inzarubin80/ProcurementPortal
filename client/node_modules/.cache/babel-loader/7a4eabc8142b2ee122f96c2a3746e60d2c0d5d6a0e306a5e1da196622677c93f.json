{"ast":null,"code":"// –ë–∞–∑–æ–≤—ã–π URL API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';\n\n// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤\n\n// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, defaultOptions);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// API –¥–ª—è —è–∑—ã–∫–æ–≤\nexport const languageApi = {\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤\n  async getLanguages() {\n    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n    const mockLanguages = [{\n      id: 1,\n      name: 'JavaScript',\n      description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',\n      icon: '‚ö°',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 2,\n      name: 'Python',\n      description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',\n      icon: 'üêç',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 3,\n      name: 'Go',\n      description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Google',\n      icon: 'üöÄ',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 4,\n      name: 'Rust',\n      description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',\n      icon: 'ü¶Ä',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 5,\n      name: 'TypeScript',\n      description: '–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript',\n      icon: 'üìò',\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }];\n    return mockLanguages;\n  },\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ ID\n  async getLanguage(id) {\n    const languages = await this.getLanguages();\n    const language = languages.find(l => l.id.toString() === id);\n    if (!language) {\n      throw new Error('Language not found');\n    }\n    return language;\n  },\n  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\n  async addLanguage(language) {\n    return apiRequest('/languages', {\n      method: 'POST',\n      body: JSON.stringify(language)\n    });\n  },\n  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\n  async updateLanguage(id, updates) {\n    return apiRequest(`/languages/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n  },\n  // –£–¥–∞–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\n  async deleteLanguage(id) {\n    return apiRequest(`/languages/${id}`, {\n      method: 'DELETE'\n    });\n  }\n};\n\n// API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π\nexport const categoryApi = {\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n  async getCategories(languageId) {\n    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n    const mockCategories = [{\n      id: 1,\n      user_id: 1,\n      language_id: 1,\n      name: '–û—Å–Ω–æ–≤—ã',\n      description: '',\n      created_at: '',\n      updated_at: ''\n    }, {\n      id: 2,\n      user_id: 1,\n      language_id: 1,\n      name: '–§—É–Ω–∫—Ü–∏–∏',\n      description: '',\n      created_at: '',\n      updated_at: ''\n    }, {\n      id: 3,\n      user_id: 1,\n      language_id: 1,\n      name: '–¶–∏–∫–ª—ã',\n      description: '',\n      created_at: '',\n      updated_at: ''\n    }, {\n      id: 4,\n      user_id: 1,\n      language_id: 2,\n      name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',\n      description: '',\n      created_at: '',\n      updated_at: ''\n    }, {\n      id: 5,\n      user_id: 1,\n      language_id: 2,\n      name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',\n      description: '',\n      created_at: '',\n      updated_at: ''\n    }];\n    if (languageId) {\n      return mockCategories.filter(c => c.language_id.toString() === languageId);\n    }\n    return mockCategories;\n  },\n  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n  async addCategory(category) {\n    const newCategory = await apiRequest('/categories', {\n      method: 'POST',\n      body: JSON.stringify(category)\n    });\n    return {\n      success: true,\n      data: newCategory,\n      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'\n    };\n  },\n  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n  async updateCategory(id, updates) {\n    const updatedCategory = await apiRequest(`/categories/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n    return {\n      success: true,\n      data: updatedCategory,\n      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'\n    };\n  },\n  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n  async deleteCategory(id) {\n    await apiRequest(`/categories/${id}`, {\n      method: 'DELETE'\n    });\n    return {\n      success: true,\n      data: true,\n      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'\n    };\n  }\n};\n\n// API –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\nexport const exerciseApi = {\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n  async getExercises() {\n    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n    const mockExercises = [{\n      id: 1,\n      user_id: 1,\n      language_id: 1,\n      category_id: 1,\n      title: 'Hello World',\n      description: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç \"Hello, World!\"',\n      code: 'console.log(\"Hello, World!\");',\n      difficulty: 'easy',\n      attempts: 15,\n      successful_attempts: 12,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 2,\n      user_id: 1,\n      language_id: 1,\n      category_id: 1,\n      title: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',\n      description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ',\n      code: 'let name = \"John\";\\nconsole.log(name);',\n      difficulty: 'easy',\n      attempts: 8,\n      successful_attempts: 7,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 3,\n      user_id: 1,\n      language_id: 1,\n      category_id: 2,\n      title: '–§—É–Ω–∫—Ü–∏—è —Å—É–º–º—ã',\n      description: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª',\n      code: 'function add(a, b) {\\n  return a + b;\\n}\\n\\nconsole.log(add(5, 3));',\n      difficulty: 'medium',\n      attempts: 12,\n      successful_attempts: 9,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 4,\n      user_id: 1,\n      language_id: 2,\n      category_id: 3,\n      title: 'Python Hello',\n      description: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',\n      code: 'print(\"Hello, World!\")',\n      difficulty: 'easy',\n      attempts: 6,\n      successful_attempts: 6,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 5,\n      user_id: 1,\n      language_id: 2,\n      category_id: 3,\n      title: '–°–ø–∏—Å–æ–∫ –≤ Python',\n      description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã',\n      code: 'numbers = [1, 2, 3, 4, 5]\\nnumbers.append(6)\\nprint(numbers)',\n      difficulty: 'medium',\n      attempts: 10,\n      successful_attempts: 8,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }, {\n      id: 6,\n      user_id: 1,\n      language_id: 3,\n      category_id: 4,\n      title: 'Go —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',\n      description: '–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Go',\n      code: 'package main\\n\\nimport \"fmt\"\\n\\ntype Person struct {\\n    Name string\\n    Age  int\\n}\\n\\nfunc main() {\\n    p := Person{Name: \"Alice\", Age: 30}\\n    fmt.Println(p)\\n}',\n      difficulty: 'hard',\n      attempts: 5,\n      successful_attempts: 3,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z'\n    }];\n    return mockExercises;\n  },\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ ID\n  async getExercise(id) {\n    const exercises = await this.getExercises();\n    const exercise = exercises.find(e => e.id.toString() === id);\n    if (!exercise) {\n      throw new Error('Exercise not found');\n    }\n    return exercise;\n  },\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ —è–∑—ã–∫—É\n  async getExercisesByLanguage(languageId) {\n    const exercises = await this.getExercises();\n    return exercises.filter(e => e.language_id.toString() === languageId);\n  },\n  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n  async addExercise(exercise) {\n    return apiRequest('/exercises', {\n      method: 'POST',\n      body: JSON.stringify(exercise)\n    });\n  },\n  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n  async updateExercise(id, updates) {\n    return apiRequest(`/exercises/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n  },\n  // –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n  async deleteExercise(id) {\n    return apiRequest(`/exercises/${id}`, {\n      method: 'DELETE'\n    });\n  }\n};\n\n// API –¥–ª—è —Å–µ—Å—Å–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\nexport const sessionApi = {\n  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏\n  async createSession(session) {\n    return apiRequest('/sessions', {\n      method: 'POST',\n      body: JSON.stringify(session)\n    });\n  },\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID\n  async getSession(id) {\n    return apiRequest(`/sessions/${id}`);\n  },\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é\n  async getSessionsByExercise(exerciseId) {\n    return apiRequest(`/exercises/${exerciseId}/sessions`);\n  },\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n  async getUserStats(exerciseId) {\n    return apiRequest(`/exercises/${exerciseId}/stats`);\n  }\n};\n\n// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞\nexport const healthApi = {\n  async checkHealth() {\n    return apiRequest('/health');\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","url","defaultOptions","headers","response","fetch","ok","errorData","json","catch","Error","error","status","console","languageApi","getLanguages","mockLanguages","id","name","description","icon","created_at","updated_at","getLanguage","languages","language","find","l","toString","addLanguage","method","body","JSON","stringify","updateLanguage","updates","deleteLanguage","categoryApi","getCategories","languageId","mockCategories","user_id","language_id","filter","c","addCategory","category","newCategory","success","data","message","updateCategory","updatedCategory","deleteCategory","exerciseApi","getExercises","mockExercises","category_id","title","code","difficulty","attempts","successful_attempts","getExercise","exercises","exercise","e","getExercisesByLanguage","addExercise","updateExercise","deleteExercise","sessionApi","createSession","session","getSession","getSessionsByExercise","exerciseId","getUserStats","healthApi","checkHealth"],"sources":["C:/Users/User/Documents/repos/ProcurementPortal/client/src/services/api.ts"],"sourcesContent":["import { Language, Category, Exercise, PaginatedResponse, Session, UserStats } from '../types/api';\r\n\r\n// –ë–∞–∑–æ–≤—ã–π URL API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';\r\n\r\n// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\n// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤\r\nconst apiRequest = async <T>(\r\n  endpoint: string, \r\n  options: RequestInit = {}\r\n): Promise<T> => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const defaultOptions: RequestInit = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers,\r\n    },\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, defaultOptions);\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// API –¥–ª—è —è–∑—ã–∫–æ–≤\r\nexport const languageApi = {\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤\r\n  async getLanguages(): Promise<Language[]> {\r\n    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\r\n    const mockLanguages: Language[] = [\r\n      {\r\n        id: 1,\r\n        name: 'JavaScript',\r\n        description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',\r\n        icon: '‚ö°',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Python',\r\n        description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',\r\n        icon: 'üêç',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Go',\r\n        description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Google',\r\n        icon: 'üöÄ',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'Rust',\r\n        description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',\r\n        icon: 'ü¶Ä',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 5,\r\n        name: 'TypeScript',\r\n        description: '–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript',\r\n        icon: 'üìò',\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n    ];\r\n    \r\n    return mockLanguages;\r\n  },\r\n\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ ID\r\n  async getLanguage(id: string): Promise<Language> {\r\n    const languages = await this.getLanguages();\r\n    const language = languages.find(l => l.id.toString() === id);\r\n    if (!language) {\r\n      throw new Error('Language not found');\r\n    }\r\n    return language;\r\n  },\r\n\r\n  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\r\n  async addLanguage(language: Omit<Language, 'id' | 'created_at' | 'updated_at'>): Promise<Language> {\r\n    return apiRequest<Language>('/languages', {\r\n      method: 'POST',\r\n      body: JSON.stringify(language),\r\n    });\r\n  },\r\n\r\n  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\r\n  async updateLanguage(id: string, updates: Partial<Language>): Promise<Language> {\r\n    return apiRequest<Language>(`/languages/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updates),\r\n    });\r\n  },\r\n\r\n  // –£–¥–∞–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\r\n  async deleteLanguage(id: string): Promise<void> {\r\n    return apiRequest<void>(`/languages/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n};\r\n\r\n// API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π\r\nexport const categoryApi = {\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\r\n  async getCategories(languageId?: string): Promise<Category[]> {\r\n    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\r\n    const mockCategories: Category[] = [\r\n      { id: 1, user_id: 1, language_id: 1, name: '–û—Å–Ω–æ–≤—ã', description: '', created_at: '', updated_at: '' },\r\n      { id: 2, user_id: 1, language_id: 1, name: '–§—É–Ω–∫—Ü–∏–∏', description: '', created_at: '', updated_at: '' },\r\n      { id: 3, user_id: 1, language_id: 1, name: '–¶–∏–∫–ª—ã', description: '', created_at: '', updated_at: '' },\r\n      { id: 4, user_id: 1, language_id: 2, name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', description: '', created_at: '', updated_at: '' },\r\n      { id: 5, user_id: 1, language_id: 2, name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', description: '', created_at: '', updated_at: '' },\r\n    ];\r\n    if (languageId) {\r\n      return mockCategories.filter(c => c.language_id.toString() === languageId);\r\n    }\r\n    return mockCategories;\r\n  },\r\n\r\n  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r\n  async addCategory(category: Omit<Category, 'id' | 'created_at' | 'updated_at'>): Promise<ApiResponse<Category>> {\r\n    const newCategory = await apiRequest<Category>('/categories', {\r\n      method: 'POST',\r\n      body: JSON.stringify(category),\r\n    });\r\n    return {\r\n      success: true,\r\n      data: newCategory,\r\n      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'\r\n    };\r\n  },\r\n\r\n  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r\n  async updateCategory(id: string, updates: Partial<Category>): Promise<ApiResponse<Category>> {\r\n    const updatedCategory = await apiRequest<Category>(`/categories/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updates),\r\n    });\r\n    return {\r\n      success: true,\r\n      data: updatedCategory,\r\n      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'\r\n    };\r\n  },\r\n\r\n  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\r\n  async deleteCategory(id: string): Promise<ApiResponse<boolean>> {\r\n    await apiRequest<void>(`/categories/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    return {\r\n      success: true,\r\n      data: true,\r\n      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'\r\n    };\r\n  },\r\n};\r\n\r\n// API –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\r\nexport const exerciseApi = {\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\r\n  async getExercises(): Promise<Exercise[]> {\r\n    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\r\n    const mockExercises: Exercise[] = [\r\n      {\r\n        id: 1,\r\n        user_id: 1,\r\n        language_id: 1,\r\n        category_id: 1,\r\n        title: 'Hello World',\r\n        description: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç \"Hello, World!\"',\r\n        code: 'console.log(\"Hello, World!\");',\r\n        difficulty: 'easy',\r\n        attempts: 15,\r\n        successful_attempts: 12,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 2,\r\n        user_id: 1,\r\n        language_id: 1,\r\n        category_id: 1,\r\n        title: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',\r\n        description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ',\r\n        code: 'let name = \"John\";\\nconsole.log(name);',\r\n        difficulty: 'easy',\r\n        attempts: 8,\r\n        successful_attempts: 7,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 3,\r\n        user_id: 1,\r\n        language_id: 1,\r\n        category_id: 2,\r\n        title: '–§—É–Ω–∫—Ü–∏—è —Å—É–º–º—ã',\r\n        description: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª',\r\n        code: 'function add(a, b) {\\n  return a + b;\\n}\\n\\nconsole.log(add(5, 3));',\r\n        difficulty: 'medium',\r\n        attempts: 12,\r\n        successful_attempts: 9,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 4,\r\n        user_id: 1,\r\n        language_id: 2,\r\n        category_id: 3,\r\n        title: 'Python Hello',\r\n        description: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',\r\n        code: 'print(\"Hello, World!\")',\r\n        difficulty: 'easy',\r\n        attempts: 6,\r\n        successful_attempts: 6,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 5,\r\n        user_id: 1,\r\n        language_id: 2,\r\n        category_id: 3,\r\n        title: '–°–ø–∏—Å–æ–∫ –≤ Python',\r\n        description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã',\r\n        code: 'numbers = [1, 2, 3, 4, 5]\\nnumbers.append(6)\\nprint(numbers)',\r\n        difficulty: 'medium',\r\n        attempts: 10,\r\n        successful_attempts: 8,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n      {\r\n        id: 6,\r\n        user_id: 1,\r\n        language_id: 3,\r\n        category_id: 4,\r\n        title: 'Go —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',\r\n        description: '–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Go',\r\n        code: 'package main\\n\\nimport \"fmt\"\\n\\ntype Person struct {\\n    Name string\\n    Age  int\\n}\\n\\nfunc main() {\\n    p := Person{Name: \"Alice\", Age: 30}\\n    fmt.Println(p)\\n}',\r\n        difficulty: 'hard',\r\n        attempts: 5,\r\n        successful_attempts: 3,\r\n        created_at: '2024-01-01T00:00:00Z',\r\n        updated_at: '2024-01-01T00:00:00Z',\r\n      },\r\n    ];\r\n    \r\n    return mockExercises;\r\n  },\r\n\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ ID\r\n  async getExercise(id: string): Promise<Exercise> {\r\n    const exercises = await this.getExercises();\r\n    const exercise = exercises.find(e => e.id.toString() === id);\r\n    if (!exercise) {\r\n      throw new Error('Exercise not found');\r\n    }\r\n    return exercise;\r\n  },\r\n\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ —è–∑—ã–∫—É\r\n  async getExercisesByLanguage(languageId: string): Promise<Exercise[]> {\r\n    const exercises = await this.getExercises();\r\n    return exercises.filter(e => e.language_id.toString() === languageId);\r\n  },\r\n\r\n  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\r\n  async addExercise(exercise: Omit<Exercise, 'id' | 'created_at' | 'updated_at'>): Promise<Exercise> {\r\n    return apiRequest<Exercise>('/exercises', {\r\n      method: 'POST',\r\n      body: JSON.stringify(exercise),\r\n    });\r\n  },\r\n\r\n  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\r\n  async updateExercise(id: string, updates: Partial<Exercise>): Promise<Exercise> {\r\n    return apiRequest<Exercise>(`/exercises/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updates),\r\n    });\r\n  },\r\n\r\n  // –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\r\n  async deleteExercise(id: string): Promise<void> {\r\n    return apiRequest<void>(`/exercises/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  },\r\n};\r\n\r\n// API –¥–ª—è —Å–µ—Å—Å–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\r\nexport const sessionApi = {\r\n  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏\r\n  async createSession(session: Omit<Session, 'id' | 'created_at'>): Promise<Session> {\r\n    return apiRequest<Session>('/sessions', {\r\n      method: 'POST',\r\n      body: JSON.stringify(session),\r\n    });\r\n  },\r\n\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID\r\n  async getSession(id: string): Promise<Session> {\r\n    return apiRequest<Session>(`/sessions/${id}`);\r\n  },\r\n\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é\r\n  async getSessionsByExercise(exerciseId: string): Promise<Session[]> {\r\n    return apiRequest<Session[]>(`/exercises/${exerciseId}/sessions`);\r\n  },\r\n\r\n  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\r\n  async getUserStats(exerciseId: string): Promise<UserStats> {\r\n    return apiRequest<UserStats>(`/exercises/${exerciseId}/stats`);\r\n  },\r\n};\r\n\r\n// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞\r\nexport const healthApi = {\r\n  async checkHealth(): Promise<{ status: string; message: string }> {\r\n    return apiRequest<{ status: string; message: string }>('/health');\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}