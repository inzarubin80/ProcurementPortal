{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { languageApi } from '../../services/api';\nconst initialState = {\n  languages: [],\n  loading: false,\n  error: null\n};\nexport const fetchLanguages = createAsyncThunk('language/fetchLanguages', async () => {\n  const response = await languageApi.getLanguages();\n  return response;\n});\nconst languageSlice = createSlice({\n  name: 'language',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchLanguages.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchLanguages.fulfilled, (state, action) => {\n      state.loading = false;\n      state.languages = action.payload;\n    }).addCase(fetchLanguages.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch languages';\n    });\n  }\n});\nexport const {\n  clearError\n} = languageSlice.actions;\nexport default languageSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","languageApi","initialState","languages","loading","error","fetchLanguages","response","getLanguages","languageSlice","name","reducers","clearError","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["C:/Users/User/Documents/repos/ProcurementPortal/client/src/store/slices/languageSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Language } from '../../types/api';\r\nimport { languageApi } from '../../services/api';\r\n\r\ninterface LanguageState {\r\n  languages: Language[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: LanguageState = {\r\n  languages: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const fetchLanguages = createAsyncThunk(\r\n  'language/fetchLanguages',\r\n  async () => {\r\n    const response = await languageApi.getLanguages();\r\n    return response;\r\n  }\r\n);\r\n\r\nconst languageSlice = createSlice({\r\n  name: 'language',\r\n  initialState,\r\n  reducers: {\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchLanguages.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchLanguages.fulfilled, (state, action: PayloadAction<Language[]>) => {\r\n        state.loading = false;\r\n        state.languages = action.payload;\r\n      })\r\n      .addCase(fetchLanguages.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || 'Failed to fetch languages';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearError } = languageSlice.actions;\r\nexport default languageSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAE/E,SAASC,WAAW,QAAQ,oBAAoB;AAQhD,MAAMC,YAA2B,GAAG;EAClCC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,yBAAyB,EACzB,YAAY;EACV,MAAMO,QAAQ,GAAG,MAAMN,WAAW,CAACO,YAAY,CAAC,CAAC;EACjD,OAAOD,QAAQ;AACjB,CACF,CAAC;AAED,MAAME,aAAa,GAAGV,WAAW,CAAC;EAChCW,IAAI,EAAE,UAAU;EAChBR,YAAY;EACZS,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDS,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACV,cAAc,CAACW,OAAO,EAAGJ,KAAK,IAAK;MAC1CA,KAAK,CAACT,OAAO,GAAG,IAAI;MACpBS,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDW,OAAO,CAACV,cAAc,CAACY,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAiC,KAAK;MAC/EN,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACV,SAAS,GAAGgB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDJ,OAAO,CAACV,cAAc,CAACe,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACnDN,KAAK,CAACT,OAAO,GAAG,KAAK;MACrBS,KAAK,CAACR,KAAK,GAAGc,MAAM,CAACd,KAAK,CAACiB,OAAO,IAAI,2BAA2B;IACnE,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAW,CAAC,GAAGH,aAAa,CAACc,OAAO;AACnD,eAAed,aAAa,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}