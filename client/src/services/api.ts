import { Language, Category, Exercise, PaginatedResponse, Session, UserStats } from '../types/api';

// –ë–∞–∑–æ–≤—ã–π URL API
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';

// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
interface ApiResponse<T> {
  success: boolean;
  data: T;
  message?: string;
  error?: string;
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const apiRequest = async <T>(
  endpoint: string, 
  options: RequestInit = {}
): Promise<T> => {
  const url = `${API_BASE_URL}${endpoint}`;
  
  const defaultOptions: RequestInit = {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  };

  try {
    const response = await fetch(url, defaultOptions);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('API request failed:', error);
    throw error;
  }
};

// API –¥–ª—è —è–∑—ã–∫–æ–≤
export const languageApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤
  async getLanguages(): Promise<Language[]> {
    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockLanguages: Language[] = [
      {
        id: 1,
        name: 'JavaScript',
        description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        icon: '‚ö°',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 2,
        name: 'Python',
        description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
        icon: 'üêç',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 3,
        name: 'Go',
        description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç Google',
        icon: 'üöÄ',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 4,
        name: 'Rust',
        description: '–°–∏—Å—Ç–µ–º–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
        icon: 'ü¶Ä',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 5,
        name: 'TypeScript',
        description: '–¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JavaScript',
        icon: 'üìò',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
    ];
    
    return mockLanguages;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ ID
  async getLanguage(id: string): Promise<Language> {
    const languages = await this.getLanguages();
    const language = languages.find(l => l.id.toString() === id);
    if (!language) {
      throw new Error('Language not found');
    }
    return language;
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  async addLanguage(language: Omit<Language, 'id' | 'created_at' | 'updated_at'>): Promise<Language> {
    return apiRequest<Language>('/languages', {
      method: 'POST',
      body: JSON.stringify(language),
    });
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  async updateLanguage(id: string, updates: Partial<Language>): Promise<Language> {
    return apiRequest<Language>(`/languages/${id}`, {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
  async deleteLanguage(id: string): Promise<void> {
    return apiRequest<void>(`/languages/${id}`, {
      method: 'DELETE',
    });
  },
};

// API –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
export const categoryApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  async getCategories(languageId?: string): Promise<Category[]> {
    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockCategories: Category[] = [
      { id: 1, user_id: 1, language_id: 1, name: '–û—Å–Ω–æ–≤—ã', description: '', created_at: '', updated_at: '' },
      { id: 2, user_id: 1, language_id: 1, name: '–§—É–Ω–∫—Ü–∏–∏', description: '', created_at: '', updated_at: '' },
      { id: 3, user_id: 1, language_id: 1, name: '–¶–∏–∫–ª—ã', description: '', created_at: '', updated_at: '' },
      { id: 4, user_id: 1, language_id: 2, name: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', description: '', created_at: '', updated_at: '' },
      { id: 5, user_id: 1, language_id: 2, name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', description: '', created_at: '', updated_at: '' },
    ];
    if (languageId) {
      return mockCategories.filter(c => c.language_id.toString() === languageId);
    }
    return mockCategories;
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async addCategory(category: Omit<Category, 'id' | 'created_at' | 'updated_at'>): Promise<ApiResponse<Category>> {
    const newCategory = await apiRequest<Category>('/categories', {
      method: 'POST',
      body: JSON.stringify(category),
    });
    return {
      success: true,
      data: newCategory,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞'
    };
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async updateCategory(id: string, updates: Partial<Category>): Promise<ApiResponse<Category>> {
    const updatedCategory = await apiRequest<Category>(`/categories/${id}`, {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
    return {
      success: true,
      data: updatedCategory,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    };
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async deleteCategory(id: string): Promise<ApiResponse<boolean>> {
    await apiRequest<void>(`/categories/${id}`, {
      method: 'DELETE',
    });
    return {
      success: true,
      data: true,
      message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    };
  },
};

// API –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
export const exerciseApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  async getExercises(): Promise<Exercise[]> {
    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockExercises: Exercise[] = [
      {
        id: 1,
        user_id: 1,
        language_id: 1,
        category_id: 1,
        title: 'Hello World',
        description: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç "Hello, World!"',
        code: 'console.log("Hello, World!");',
        difficulty: 'easy',
        attempts: 15,
        successful_attempts: 12,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 2,
        user_id: 1,
        language_id: 1,
        category_id: 1,
        title: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
        description: '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ',
        code: 'let name = "John";\nconsole.log(name);',
        difficulty: 'easy',
        attempts: 8,
        successful_attempts: 7,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 3,
        user_id: 1,
        language_id: 1,
        category_id: 2,
        title: '–§—É–Ω–∫—Ü–∏—è —Å—É–º–º—ã',
        description: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª',
        code: 'function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(5, 3));',
        difficulty: 'medium',
        attempts: 12,
        successful_attempts: 9,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 4,
        user_id: 1,
        language_id: 2,
        category_id: 3,
        title: 'Python Hello',
        description: '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        code: 'print("Hello, World!")',
        difficulty: 'easy',
        attempts: 6,
        successful_attempts: 6,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 5,
        user_id: 1,
        language_id: 2,
        category_id: 3,
        title: '–°–ø–∏—Å–æ–∫ –≤ Python',
        description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã',
        code: 'numbers = [1, 2, 3, 4, 5]\nnumbers.append(6)\nprint(numbers)',
        difficulty: 'medium',
        attempts: 10,
        successful_attempts: 8,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
      {
        id: 6,
        user_id: 1,
        language_id: 3,
        category_id: 4,
        title: 'Go —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
        description: '–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ Go',
        code: 'package main\n\nimport "fmt"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc main() {\n    p := Person{Name: "Alice", Age: 30}\n    fmt.Println(p)\n}',
        difficulty: 'hard',
        attempts: 5,
        successful_attempts: 3,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z',
      },
    ];
    
    return mockExercises;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ ID
  async getExercise(id: string): Promise<Exercise> {
    const exercises = await this.getExercises();
    const exercise = exercises.find(e => e.id.toString() === id);
    if (!exercise) {
      throw new Error('Exercise not found');
    }
    return exercise;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ —è–∑—ã–∫—É
  async getExercisesByLanguage(languageId: string): Promise<Exercise[]> {
    const exercises = await this.getExercises();
    return exercises.filter(e => e.language_id.toString() === languageId);
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  async addExercise(exercise: Omit<Exercise, 'id' | 'created_at' | 'updated_at'>): Promise<Exercise> {
    return apiRequest<Exercise>('/exercises', {
      method: 'POST',
      body: JSON.stringify(exercise),
    });
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  async updateExercise(id: string, updates: Partial<Exercise>): Promise<Exercise> {
    return apiRequest<Exercise>(`/exercises/${id}`, {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  async deleteExercise(id: string): Promise<void> {
    return apiRequest<void>(`/exercises/${id}`, {
      method: 'DELETE',
    });
  },
};

// API –¥–ª—è —Å–µ—Å—Å–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
export const sessionApi = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
  async createSession(session: Omit<Session, 'id' | 'created_at'>): Promise<Session> {
    return apiRequest<Session>('/sessions', {
      method: 'POST',
      body: JSON.stringify(session),
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID
  async getSession(id: string): Promise<Session> {
    return apiRequest<Session>(`/sessions/${id}`);
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
  async getSessionsByExercise(exerciseId: string): Promise<Session[]> {
    return apiRequest<Session[]>(`/exercises/${exerciseId}/sessions`);
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserStats(exerciseId: string): Promise<UserStats> {
    return apiRequest<UserStats>(`/exercises/${exerciseId}/stats`);
  },
};

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
export const healthApi = {
  async checkHealth(): Promise<{ status: string; message: string }> {
    return apiRequest<{ status: string; message: string }>('/health');
  },
}; 